// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`1. should import simple queries 1`] = `
"
import mySimpleQuery from \\"./simpleQuery.graphql\\";
const foo = \\"bar\\";

      ↓ ↓ ↓ ↓ ↓ ↓

const mySimpleQuery = { \\"kind\\": \\"Document\\", \\"definitions\\": [{ \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"simpleQuery\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Product\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"description\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"weight\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }] } }], \\"loc\\": { \\"start\\": 0, \\"end\\": 66, \\"source\\": { \\"body\\": \\"fragment simpleQuery on Product {\\\\n  name\\\\n  description\\\\n  weight\\\\n}\\\\n\\", \\"name\\": \\"GraphQL\\" } } };

const foo = \\"bar\\";
"
`;

exports[`2. should import queries with imported fragments 1`] = `
"
import mySimpleQuery from \\"./queryWithFragment.graphql\\";

      ↓ ↓ ↓ ↓ ↓ ↓

const mySimpleQuery = { \\"kind\\": \\"Document\\", \\"definitions\\": [{ \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"QueryWithFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Product\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"FragmentSpread\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"ASingleFragment\\" }, \\"directives\\": [] }] } }, { \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"ASingleFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Product\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"description\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"weight\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }] } }], \\"loc\\": { \\"start\\": 0, \\"end\\": 101, \\"source\\": { \\"body\\": \\"#import \\\\\\"./aFragment.graphql\\\\\\"\\\\n\\\\nfragment QueryWithFragment on Product {\\\\n  name\\\\n  ...ASingleFragment\\\\n}\\\\n\\", \\"name\\": \\"GraphQL\\" } } };
"
`;

exports[`3. should deduplicate imported fragments to import them only once 1`] = `
"
import mySimpleQuery from \\"./queryWithSameFragment.graphql\\";
import myOtherQuery from \\"./otherQueryWithSameFragment.graphql\\";

      ↓ ↓ ↓ ↓ ↓ ↓

const mySimpleQuery = { \\"kind\\": \\"Document\\", \\"definitions\\": [{ \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"QueryWithSameFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Product\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"FragmentSpread\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"AFragment\\" }, \\"directives\\": [] }] } }, { \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"AFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Product\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"description\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"weight\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }] } }], \\"loc\\": { \\"start\\": 0, \\"end\\": 99, \\"source\\": { \\"body\\": \\"#import \\\\\\"./aFragment.graphql\\\\\\"\\\\n\\\\nfragment QueryWithSameFragment on Product {\\\\n  name\\\\n  ...AFragment\\\\n}\\\\n\\", \\"name\\": \\"GraphQL\\" } } };
const myOtherQuery = { \\"kind\\": \\"Document\\", \\"definitions\\": [{ \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"OtherQueryWithSameFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Category\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"id\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"products\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"FragmentSpread\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"AFragment\\" }, \\"directives\\": [] }] } }] } }], \\"loc\\": { \\"start\\": 0, \\"end\\": 129, \\"source\\": { \\"body\\": \\"#import \\\\\\"./aFragment.graphql\\\\\\"\\\\n\\\\nfragment OtherQueryWithSameFragment on Category {\\\\n  id\\\\n  name\\\\n  products {\\\\n    ...AFragment\\\\n  }\\\\n}\\\\n\\", \\"name\\": \\"GraphQL\\" } } };
"
`;

exports[`4. should import fragments recursively 1`] = `
"
import mySimpleQuery from \\"./queryWithNestedFragment.graphql\\";

      ↓ ↓ ↓ ↓ ↓ ↓

const mySimpleQuery = { \\"kind\\": \\"Document\\", \\"definitions\\": [{ \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"QueryWithNestedFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Category\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"FragmentSpread\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"CategoryProductsFragment\\" }, \\"directives\\": [] }] } }, { \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"CategoryProductsFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Product\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"products\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"name\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"FragmentSpread\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"ProductNestedFragment\\" }, \\"directives\\": [] }] } }] } }, { \\"kind\\": \\"FragmentDefinition\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"ProductNestedFragment\\" }, \\"typeCondition\\": { \\"kind\\": \\"NamedType\\", \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"Product\\" } }, \\"directives\\": [], \\"selectionSet\\": { \\"kind\\": \\"SelectionSet\\", \\"selections\\": [{ \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"sku\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }, { \\"kind\\": \\"Field\\", \\"alias\\": null, \\"name\\": { \\"kind\\": \\"Name\\", \\"value\\": \\"price\\" }, \\"arguments\\": [], \\"directives\\": [], \\"selectionSet\\": null }] } }], \\"loc\\": { \\"start\\": 0, \\"end\\": 128, \\"source\\": { \\"body\\": \\"#import \\\\\\"./aFragmentWithNesting.graphql\\\\\\"\\\\n\\\\nfragment QueryWithNestedFragment on Category {\\\\n  name\\\\n  ...CategoryProductsFragment\\\\n}\\\\n\\", \\"name\\": \\"GraphQL\\" } } };
"
`;
